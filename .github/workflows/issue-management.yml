name: Issue Management

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
    - name: Auto-label issues
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body?.toLowerCase() || '';
          
          const labels = [];
          
          // Auto-label based on content
          if (title.includes('pota') || body.includes('pota') || title.includes('parks on the air')) {
            labels.push('pota');
          }
          
          if (title.includes('sota') || body.includes('sota') || title.includes('summits on the air')) {
            labels.push('sota');
          }
          
          if (title.includes('repeater') || body.includes('repeater')) {
            labels.push('repeaters');
          }
          
          if (title.includes('bug') || title.includes('error') || title.includes('not working')) {
            labels.push('bug');
          }
          
          if (title.includes('feature') || title.includes('enhancement') || title.includes('add')) {
            labels.push('enhancement');
          }
          
          if (title.includes('country') || body.includes('country')) {
            labels.push('new-country');
          }
          
          if (title.includes('api') || body.includes('api')) {
            labels.push('api');
          }
          
          if (title.includes('csv') || title.includes('format') || body.includes('csv')) {
            labels.push('format');
          }
          
          // Add default label if none matched
          if (labels.length === 0) {
            labels.push('question');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: labels
            });
          }

  welcome-new-contributors:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
    - name: Welcome first-time contributors
      uses: actions/github-script@v7
      with:
        script: |
          // Check if this is the user's first issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            creator: context.payload.issue.user.login,
            state: 'all'
          });
          
          if (issues.length === 1) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `👋 Welcome to the Icom ID-52PLUS Codeplug Generator!
              
Thanks for opening your first issue! Here are some helpful resources:

## Quick Help
- **POTA Issues**: Check the [POTA API status](https://api.pota.app/programs/locations) first
- **CSV Format Issues**: Ensure you're using the ASCII-converted files
- **Missing Countries**: We currently support Austria, Slovakia, and Singapore

## Useful Information
Please include in bug reports:
- Which CSV files you're trying to use
- Any error messages from your Icom programming software  
- Your operating system and software versions

## Feature Requests
We welcome requests for:
- New country support
- Additional data sources
- Format improvements

Thanks for contributing to amateur radio software! 📻`
            });
          }

  feature-request-template:
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' && contains(github.event.label.name, 'enhancement')
    
    steps:
    - name: Add feature request template
      uses: actions/github-script@v7  
      with:
        script: |
          const issue = context.payload.issue;
          
          // Check if this is a new feature request that needs more details
          if (!issue.body || issue.body.length < 100) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `## Feature Request Information Needed

To help us implement your feature request, please provide:

### 🎯 What feature would you like?
- Describe the functionality you'd like to see

### 🌍 Country/Region Support
- Which country or region data source?
- Any specific API or database URLs?

### 📡 Radio Compatibility  
- Icom ID-52PLUS specific requirements?
- Special formatting needs?

### 📋 Use Case
- How would you use this feature?
- What amateur radio activities would this support?

### 🔗 References
- Links to data sources or documentation
- Examples from other projects

Thanks for helping improve the project! The more details you provide, the easier it will be to implement your request.`
            });
          }